Member Variable Order In Classes

	Organize them in ways that make sense to a human. Easy to understand.
	This might not be optimal, so there are two other ways to order.
		
		Memory Efficiency:
		Order from small to big (default), or big to small
		
		Speed:
		Most used to least used
		
		***Be warned that these optimization tricks MIGHT NOT WORK, or might even make things WORSE. 
			Depends HEAVILY on how the CPU caches stuff and on how the OS handles threads.
			
			
Interpreted vs Compiled Programming Languages

	Compiled:
		The programmer compiles the source code to create an executable that gets installed on the target machine.
		(C, C++)
		
		Pro:
			ONLY what you need is in the exectutable, which ends up being a lot smaller.
			Faster execution time.
			The compiler can give warnings or errors before delivery.
		
		Con:
			Tends to be lower level code, which is harder to understand and debug.
		
	Interpreted:
		The programmer delivers the source code to the target computer without compiling it. 
		The target computer executes the source code by feeding it one line at a time into an app that does the compilation in realtime.
		This is often called a virtual machine.
		
		Pro:
			Tends to be much higher level code, which is easier to understand and debug.
		
		Con: 
			You need to install the virtual machine as well as the code. (The VM is gigantic).
			Execution speed is slow because compilation happens at runtime.
			Can't find compile errors before delivering.
			

Loose vs Strong Typed Programming Languages

	Loosely Typed:
		Tend to be higher level.
		You often don't have to specify types or keep types consitent.
			
		Preferred Because: People prefer this because they can use whatever types and mix them more freely.

		
		Examples: Python
		
	Strongly Typed:
		Tends to be lower level.
		You do often have to specify types or keep types consistent.
		
		Preferred Because: You can use the type system to make code more understandable and less error prone.
							Fine grain control of type sizes increases memory efficiency.
							Fine grain control of type increases speed. Because there is less work to figure out how to do.
		
		Examples: C++
	
	

Bitwise Operations

AND/OR: If both bits are the same, that is the result.
		They are only opposites when the bits are different.
		
AND is how we check
OR is how we set
	
	
	
High Level vs Low Level Code

	High Level:
		less detailed control, more general, computer does more so you don't have to
		using OOD
		using big full names instead of numbers (more readable!)
		Doing a LOT more per line of code
		SLOWER
		MORE MEM
		
	void performDatabaseUpdate(IDatabase & database)
	{
		StopAcceptingNewJobsScoped scoped(database);
		database.waitForAllJobsToFinishOrThrow(10);
		databse.updateFromMasterServer();
	}
		
	Low Level:
		Fine grained control, programmer does more so computer does not have to
		Bit hacking
		direct memory control/manipulation
		using numbers for everything (with/without enum)
		FASTER
		LESS MEM (if you bother to use the low-level control you have)
		
		bool isMagical(const unsigned char itemBitFlag)
		{
			const unsigned char enchantedBit(1<<1);
			const unsigned char cursedBit(1<<2);
			const unsigned char magicBits(enchantedBit | cursedBit);
			return (itemBitFlag & magicBits);
		}
		
		
		